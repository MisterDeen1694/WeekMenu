---
//Comments made with love by chatGPT
// --- Imports ---
// CSS voor de pagina
import "@/assets/styles/RecipePage.css";

// Database en tabel-definities
import {
	db,
	Recipe,
	eq,
	RecipeIngredient,
	Ingredient as IngredientTable,
	RecipeInstruction,
	Nutrient as NutrientTable,
	IngredientNutrient,
	RecipeTime,
} from "astro:db";

// Utility functies voor formatting, parsing en slugify
import { slugify, formatTimeLabelledShort } from "@/utils/formatting";

// Componenten voor de pagina layout
import Header from "@/components/recipe/Header.astro";
import NutritionSummary from "@/components/recipe/NutritionSummary.astro";
import Times from "@/components/recipe/Times.astro";
import Ingredients from "@/components/recipe/Ingredients.astro";
import Instructions from "@/components/recipe/Instructions.astro";

// Helper functies voor data transformatie, voedingswaarden berekenen en portion scaling
import { groupIngredientsWithNutrients } from "@/utils/transform";
import { calculateTotalNutrients } from "@/utils/nutrition";
import { getPortionMultiplier } from "@/utils/scale";
import { parseInstructions } from "@/utils/instructions";

// --- URL Parameters ophalen ---
// Haal id en naam (slug) van de receptpagina uit de URL parameters
const { id, name } = Astro.params as { id: string; name: string };
// Optioneel: portie en kcal query params
const portionParam = Astro.url.searchParams.get("portion");
const kcalParam = Astro.url.searchParams.get("kcal");
const desiredKcal = kcalParam ? parseFloat(kcalParam) : null;

// --- Database query ---
// Haal alle relevante info op over het recept (behalve instructies)
const result = await db
	.select({
		recipeTitle: Recipe.title,
		recipeAuthor: Recipe.author,
		recipeSource: Recipe.source,
		recipeCover: Recipe.cover,
		recipePortion: Recipe.portionSize,
		recipeKcal: Recipe.totalKcal,
		recipeDefrostTime: RecipeTime.defrostTime,
		recipeCookingTime: RecipeTime.cookingTime,
		recipeOvenTime: RecipeTime.ovenTime,
		recipeAdditionalWaitTime: RecipeTime.additionalWaitTime,

		productId: IngredientTable.id,
		productName: IngredientTable.name,
		productUnit: IngredientTable.unit,
		productAmount: RecipeIngredient.amount,
		productSlug: IngredientTable.slug,

		nutrientId: NutrientTable.id,
		nutrientName: NutrientTable.name,
		nutrientUnit: NutrientTable.unit,
		perAmount: IngredientNutrient.perAmount,
		perUnit: IngredientNutrient.perUnit,
		nutrientAmount: IngredientNutrient.amount,
	})
	.from(RecipeIngredient)
	.innerJoin(
		IngredientTable,
		eq(RecipeIngredient.ingredientId, IngredientTable.id)
	)
	.innerJoin(Recipe, eq(RecipeIngredient.recipeId, Recipe.id))
	.innerJoin(RecipeTime, eq(RecipeTime.recipeId, Recipe.id))
	.leftJoin(
		IngredientNutrient,
		eq(IngredientTable.id, IngredientNutrient.ingredientId)
	)
	.leftJoin(
		NutrientTable,
		eq(IngredientNutrient.nutrientId, NutrientTable.id)
	)
	.where(eq(Recipe.id, id));

// Als er geen resultaten zijn, stuur 404 terug
if (!result.length) {
	return new Response(null, {
		status: 404,
	});
}

// --- URL Slug check ---
// Controleer of de slug in de URL overeenkomt met de titel van het recept (ge-slugified)
// Zo niet, redirect naar de correcte URL
const expectedSlug = slugify(result[0]?.recipeTitle);
if (name !== expectedSlug) {
	return Astro.redirect(`/recipe/${id}/${expectedSlug}`);
}

// --- Query voor instructies ---
// Haal alle instructies op, geordend op stapnummer
const instructions = await db
	.select({
		stepNumber: RecipeInstruction.stepNumber,
		instruction: RecipeInstruction.instruction,
		image: RecipeInstruction.image,
	})
	.from(RecipeInstruction)
	.where(eq(RecipeInstruction.recipeId, id))
	.orderBy(RecipeInstruction.stepNumber);

// --- Data structureren ---
// Bundel alle data in één 'recipe' object voor makkelijker gebruik in de pagina
const recipe = {
	title: result[0]?.recipeTitle,
	author: result[0]?.recipeAuthor,
	source: result[0]?.recipeSource,
	cover: result[0]?.recipeCover,
	defrostTime: result[0]?.recipeDefrostTime,
	cookingTime: result[0]?.recipeCookingTime,
	ovenTime: result[0]?.recipeOvenTime,
	additionalWaitTime: result[0]?.recipeAdditionalWaitTime,
	portionSize: result[0]?.recipePortion,
	ingredients: groupIngredientsWithNutrients(result), // Ingrediënten gegroepeerd met bijbehorende voedingswaarden
	instructions: instructions.map((step) => ({
		instruction: step.instruction,
		image: step.image,
	})),
};

// --- Portie multiplier bepalen ---
// Bepaal de schaalfactor op basis van gewenste kcal of portie grootte
const finalMultiplier = getPortionMultiplier(
	desiredKcal,
	result[0]?.recipeKcal,
	recipe.portionSize,
	portionParam
);

// --- Ingrediënten schalen ---
// Pas de hoeveelheden van de ingrediënten aan met de multiplier
const scaledIngredients = recipe.ingredients.map((ing) => ({
	...ing,
	amount: ing.amount * finalMultiplier,
}));

// --- Totale voedingswaarden berekenen ---
// Bereken totaal aan voedingswaarden van de geschaalde ingrediënten
const totalNutrients = calculateTotalNutrients(scaledIngredients);

// --- Tijd samenvatting formatteren ---
// Maak een korte samenvatting van alle tijden (ontdooien, koken etc.)
const timeSummary = formatTimeLabelledShort(
	recipe.defrostTime,
	recipe.cookingTime,
	recipe.ovenTime,
	recipe.additionalWaitTime
);

// --- Instructies parsen ---
// Voeg aan elke instructie parsed tekst toe met de juiste ingredienthoeveelheden
const parsedInstructions = parseInstructions(
	recipe.instructions,
	recipe.ingredients,
	finalMultiplier
);
---

<html lang="nl">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>{recipe.title}</title>
	</head>
	<body class="recipe-page">
		<!-- Header met titel, auteur, bron en tijdsinfo -->
		<Header
			title={recipe.title}
			author={recipe.author}
			source={recipe.source}
			cover={recipe.cover}
			timeSummary={timeSummary}
		/>

		<!-- Nutrition summary component met totaal voedingswaarden -->
		<NutritionSummary totalNutrients={totalNutrients} />

		<!-- Component die kooktijden laat zien -->
		<Times
			defrostTime={recipe.defrostTime}
			cookingTime={recipe.cookingTime}
			ovenTime={recipe.ovenTime}
			additionalWaitTime={recipe.additionalWaitTime}
		/>

		<!-- Ingrediënten lijst met geschaalde hoeveelheden -->
		<Ingredients ingredients={scaledIngredients} />

		<!-- Stap-voor-stap kookinstructies met parsing -->
		<Instructions instructions={parsedInstructions} />
	</body>
</html>
